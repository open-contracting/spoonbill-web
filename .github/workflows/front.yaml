name: push-front
on:
  workflow_dispatch:
  push:
    branches:
       - master
       - main
    paths:
       - 'frontend/**'

jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      CI: true
      FILE_UPLOAD_TEMP_DIR: /tmp/
      MEDIA_ROOT: /tmp/
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: spoonbillpwd
          POSTGRES_USER: spoonbilluser
          POSTGRES_DB: spoonbill
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2.3.1
        with:
          python-version: 3.8
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          bundler-cache: true
      - uses: actions/setup-node@v2
        with:
          node-version: '10'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install requirements
        run: pip install -r requirements_dev.txt
      - name: Run pre-commit
        run: |
            pip install --upgrade pre-commit coveralls
            pre-commit autoupdate
            pre-commit run --all-files
      - name: Run tests
        run: |
            sed -i 1d .envrc
            source .envrc
            pytest --cov-fail-under=60
        env:
          DEBUG: True
      - name: Test frontend
        run: |
              cd ./frontend
              gem install coveralls-lcov
              npm install
              npm run test:unit
              coveralls-lcov -v -n ./coverage/lcov.info > coverage.json
      - name: Upload to coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: coveralls --service=github --merge=./frontend/coverage.json
      - name: "Upload to transifex"
        run: |
              sudo apt-get install gettext
              cd ./frontend
              npm run gettext-extract
              pip install transifex-client
              export TX_TOKEN=${{ secrets.TX_TOKEN }}
              tx push -s

  build:
    runs-on: ubuntu-latest
    needs: tests
    env:
      CI: true
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2.3.1
        with:
          python-version: 3.8
      - name: "Download from transifex"
        run: |
              pip install transifex-client
              cd ./frontend
              export TX_TOKEN=${{ secrets.TX_TOKEN }}
              tx pull -a -f

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build container image
        uses: docker/build-push-action@v2.7.0
        with:
          context: ./frontend
          push: true
          build_args: |
            VUE_APP_API_URL=/api/
            VUE_APP_WEBSOCKET_URL=/api/ws
          cache-from: type=registry,ref=${{ github.repository }}/front:latest
          cache-to: type=inline
          tags: ${{ github.repository }}/front:latest
