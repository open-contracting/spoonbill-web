name: push
on:
  workflow_dispatch:
    inputs:
        SKIP_TEST:
          description: 'Skip tests'
          required: true
          default: 'false'
  push:
    branches:
       - master
       - main
    paths-ignore:
       - 'frontend/**'
       - 'docs/**'

jobs:
  tests:
    runs-on: ubuntu-latest
    env:
      CI: true
      FILE_UPLOAD_TEMP_DIR: /tmp/
      MEDIA_ROOT: /tmp/
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: spoonbillpwd
          POSTGRES_USER: spoonbilluser
          POSTGRES_DB: spoonbill
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          bundler-cache: true
      - uses: actions/setup-node@v3.0.0
        with:
          node-version: '10'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install requirements
        run: pip install -r requirements_dev.txt
      - name: Run pre-commit
        run: |
            pip install --upgrade pre-commit coveralls
            pre-commit autoupdate
            pre-commit run --all-files
      - name: Run tests
        run: |
            sed -i 1d .envrc
            source .envrc
            pytest --cov-fail-under=60
        env:
          DEBUG: True
      - name: Test frontend
        run: |
              cd ./frontend
              gem install coveralls-lcov
              npm install
              npm run test:unit
              coveralls-lcov -v -n ./coverage/lcov.info > coverage.json
      - name: Upload to coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: coveralls --service=github --merge=./frontend/coverage.json
      - name: Install gettext
        run: sudo apt-get install gettext
      - name: Create traslate files
        run: ./manage.py makemessages --all --keep-pot
      - name: "Upload translate files to transifex"
        with:
            TX_TOKEN: ${{ secrets.TX_TOKEN }}
            git_flow: false
            github_token: ${{ secrets.GITHUB_TOKEN }}
            pull_translations: false
            pull_sources: false
            push_translations: false
            push_sources: true
        uses: docker://sergioisidoro/github-transifex-action:v0.2.0

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: tests
    env:
      CI: true
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8
      - name: Check out tests repository
        uses: actions/checkout@v3
        with:
          repository: open-contracting/spoonbill-test
          path: 'test'
      - name: Install requirements
        run: pip install -r test/requirements.txt
      - uses: nanasess/setup-chromedriver@v1.0.5
      - name: create env file
        run: |
              echo "POSTGRES_USER=spoonbilluser" >> .env
              echo "POSTGRES_PASSWORD=spoonbillpwd" >> .env
              echo "POSTGRES_DB=spoonbill" >> .env
              echo "CORS_ORIGIN_WHITELIST=http://127.0.0.1:8000,http://127.0.0.1" >> .env
              echo "CELERY_BACKEND=db+postgresql://spoonbilluser:spoonbillpwd@postgres/spoonbill" >> .env
              echo "API_PREFIX=api/" >> .env
              echo "JOB_FILES_TIMEOUT=5" >> .env
      - name: "Download translate files from transifex for front"
        run: |
              pip install transifex-client
              cd ./frontend
              export TX_TOKEN=${{ secrets.TX_TOKEN }}
              tx pull -a
      - name: "Download translate files from transifex"
        uses: docker://sergioisidoro/github-transifex-action:v0.2.0
        with:
            TX_TOKEN: ${{ secrets.TX_TOKEN }}
            git_flow: false
            github_token: ${{ secrets.GITHUB_TOKEN }}
            pull_translations: true
            pull_sources: false
            push_translations: false
            push_sources: false
      - name: Copy translate file for Tests
        run: |
              cp  core/locale/es/LC_MESSAGES/django.po test/resources/core_es.po
              cp  spoonbill_web/locale/es/LC_MESSAGES/django.po  test/resources/backend_es.po
              cp  frontend/locale/es/lang.po test/resources/front_es.po
      - name: Run tests docker-compose
        run: |
              docker-compose -f docker-compose.test.yaml build
              docker-compose -f docker-compose.test.yaml pull
              docker-compose -f docker-compose.test.yaml up -d
              sleep 60
              docker-compose -f docker-compose.test.yaml logs app
              docker ps
              cd ./test
              if [ "${{ github.event.inputs.SKIP_TEST }}" != "true" ]; then
              DOMAIN_URL=http://127.0.0.1/api SITE_URL=http://127.0.0.1 POSTGRES_HOST=127.0.0.1 POSTGRES_DB=spoonbill POSTGRES_USER=spoonbilluser POSTGRES_PASSWORD=spoonbillpwd python -m robot -n noncritical tests
              fi
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Tests result
          path: |
            test/output.xml
            test/log.html
            test/report.html

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build container image
        uses: docker/build-push-action@v2.9.0
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}/app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
