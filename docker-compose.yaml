version: '3.7'

services:
  traefik:
    image: traefik:v2.4
    container_name: traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - main
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.dashboard.rule=PathPrefix(`/dashboard`)'
      - 'traefik.http.routers.dashboard.entrypoints=dashboard'
      - 'traefik.http.routers.dashboard.service=api@internal'
    ports:
      - ${TRAEFIK_IP:-0.0.0.0}:80:80
      - ${TRAEFIK_IP:-0.0.0.0}:8888:8888
    command:
      - '--api'
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedByDefault=false'
      - '--entrypoints.http=true'
      - '--entrypoints.http.address=:80'
      - '--entrypoints.dashboard=true'
      - '--entrypoints.dashboard.address=:8888'
      - '--log=true'
      - '--log.level=INFO'
  app:
    build: .
    command: sh -c "python manage.py collectstatic --noinput && python manage.py migrate && daphne -b 0.0.0.0 -p 8000 spoonbill_web.asgi:application"
    container_name: app
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.app.entrypoints=http'
      - 'traefik.http.routers.app.rule=PathPrefix(`/api`) || PathPrefix(`/ws`)'
    depends_on:
      - postgres
      - redis
      - traefik
    ports:
      - "8000:8000"
    hostname: app
    environment:
      - DEBUG=1
      - SECRET_KEY=qgop1_i7%*3r9-=z-+_mz4r-!tool@(-a_r(g@k6jb6w5r13%m
      - DJANGO_ALLOWED_HOSTS=127.0.0.1 localhost
      - ALLOWED_HOSTS=127.0.0.1 localhost
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BACKEND=db+postgresql://spoonbilluser:spoonbillpwd@postgres/spoonbill
      - POSTGRES_DB=spoonbill
      - POSTGRES_USER=spoonbilluser
      - POSTGRES_PASSWORD=spoonbillpwd
      - DB_HOST=postgres
      - API_PREFIX=api/
    image: app-image
    networks:
      - main
    volumes:
      - temporary-data:/tmp
    restart: on-failure
  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:13
    environment:
      - POSTGRES_USER=spoonbilluser
      - POSTGRES_PASSWORD=spoonbillpwd
      - POSTGRES_DB=spoonbill
    networks:
      - main
    ports:
      - "5432:5432"
    restart: on-failure
    volumes:
      - postgresql-data:/var/lib/postgresql/data
  redis:
    container_name: redis
    hostname: redis
    image: redis:latest
    networks:
      - main
    restart: on-failure
    ports:
      - "6379:6379"
  celery_worker:
    command: celery -A spoonbill_web worker -l INFO --concurrency=2
    container_name: celery_worker
    environment:
      - DEBUG=1
      - SECRET_KEY=qgop1_i7%*3r9-=z-+_mz4r-!tool@(-a_r(g@k6jb6w5r13%m
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BACKEND=db+postgresql://spoonbilluser:spoonbillpwd@postgres/spoonbill
      - POSTGRES_DB=spoonbill
      - POSTGRES_USER=spoonbilluser
      - POSTGRES_PASSWORD=spoonbillpwd
      - DB_HOST=postgres
    depends_on:
      - app
      - postgres
      - redis
    volumes:
      - temporary-data:/tmp
    hostname: celery_worker
    image: app-image
    networks:
      - main
    restart: on-failure
  celery_beat:
    command: celery -A spoonbill_web beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    container_name: celery_beat
    environment:
      - DEBUG=1
      - SECRET_KEY=qgop1_i7%*3r9-=z-+_mz4r-!tool@(-a_r(g@k6jb6w5r13%m
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BACKEND=db+postgresql://spoonbilluser:spoonbillpwd@postgres/spoonbill
      - POSTGRES_DB=spoonbill
      - POSTGRES_USER=spoonbilluser
      - POSTGRES_PASSWORD=spoonbillpwd
      - DB_HOST=postgres
    depends_on:
      - app
      - postgres
      - redis
    hostname: celery_beat
    image: app-image
    networks:
      - main
    restart: on-failure
  front:
    build:
      context: ./frontend
      args:
        VUE_APP_API_URL: http://127.0.0.1/api/
        VUE_APP_WEBSOCKET_URL: ws://127.0.0.1/api/ws
    image: front
    container_name: front
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.site.entrypoints=http'
      - 'traefik.http.routers.site.rule=PathPrefix(`/`)'
    ports:
      - "88:88"
    depends_on:
      - app
    hostname: front
    networks:
      - main
    restart: on-failure

networks:
  main:

volumes:
  postgresql-data:
  temporary-data:
