x-shared: &shared
  env_file: .env
  restart: unless-stopped

x-django: &django
  <<: *shared
  image: app
  build:
    context: .
    dockerfile: Dockerfile_django
  extra_hosts:
    - "host.docker.internal:host-gateway"
  volumes:
    - temporary-data:/data/media
  depends_on:
    - postgres
    - redis

services:
  traefik:
    image: traefik:v2.4
    ports:
      - 80:80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - 'traefik.enable=true'
    command:
      - '--api'
      - '--api.insecure=true'
      - '--providers.docker=true'
      - '--providers.docker.exposedByDefault=false'
      - '--entrypoints.http=true'
      - '--entrypoints.http.address=:80'
  postgres:
    image: postgres:16
    volumes:
      - postgresql-data:/var/lib/postgresql/data
  redis:
    image: bitnami/redis:6.2
    restart: always
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
    healthcheck:
      test: redis-cli -h 127.0.0.1 ping | grep -q PONG
      interval: 10s
      timeout: 5s
      retries: 5
  app:
    <<: *django
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.app.entrypoints=http'
      - 'traefik.http.routers.app.rule=PathPrefix(`/api/`)'
  celery_worker:
    <<: *django
    command: celery -A core worker -l INFO --concurrency=4
  celery_beat:
    <<: *django
    command: celery -A core beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
  static:
    image: static
    build:
      context: .
      dockerfile: Dockerfile_static
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.site.entrypoints=http'
      - 'traefik.http.routers.site.rule=PathPrefix(`/`)'
    volumes:
      - temporary-data:/data/media

volumes:
  postgresql-data:
  temporary-data:
